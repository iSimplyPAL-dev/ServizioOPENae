'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml

Namespace DLL
  <Serializable(), _
   System.ComponentModel.DesignerCategoryAttribute("code"), _
   System.Diagnostics.DebuggerStepThrough(), _
   System.ComponentModel.ToolboxItem(True)> _
  Public Class dsContatti
	Inherits DataSet

	Private tableCONTATTI As CONTATTIDataTable

	Public Sub New()
	  MyBase.New()
	  Me.InitClass()
	  Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
	  AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
	  AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
	End Sub

	Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
	  MyBase.New()
	  Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)), String)
	  If (Not (strSchema) Is Nothing) Then
		Dim ds As DataSet = New DataSet()
		ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
		If (Not (ds.Tables("CONTATTI")) Is Nothing) Then
		  Me.Tables.Add(New CONTATTIDataTable(ds.Tables("CONTATTI")))
		End If
		Me.DataSetName = ds.DataSetName
		Me.Prefix = ds.Prefix
		Me.Namespace = ds.Namespace
		Me.Locale = ds.Locale
		Me.CaseSensitive = ds.CaseSensitive
		Me.EnforceConstraints = ds.EnforceConstraints
		Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
		Me.InitVars()
	  Else
		Me.InitClass()
	  End If
	  Me.GetSerializationData(info, context)
	  Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
	  AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
	  AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
	End Sub

	<System.ComponentModel.Browsable(False), _
	 System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
	Public ReadOnly Property CONTATTI() As CONTATTIDataTable
	  Get
		Return Me.tableCONTATTI
	  End Get
	End Property

	Public Overrides Function Clone() As DataSet
	  Dim cln As dsContatti = CType(MyBase.Clone, dsContatti)
	  cln.InitVars()
	  Return cln
	End Function

	Protected Overrides Function ShouldSerializeTables() As Boolean
	  Return False
	End Function

	Protected Overrides Function ShouldSerializeRelations() As Boolean
	  Return False
	End Function

	Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
	  Me.Reset()
	  Dim ds As DataSet = New DataSet()
	  ds.ReadXml(reader)
	  If (Not (ds.Tables("CONTATTI")) Is Nothing) Then
		Me.Tables.Add(New CONTATTIDataTable(ds.Tables("CONTATTI")))
	  End If
	  Me.DataSetName = ds.DataSetName
	  Me.Prefix = ds.Prefix
	  Me.Namespace = ds.Namespace
	  Me.Locale = ds.Locale
	  Me.CaseSensitive = ds.CaseSensitive
	  Me.EnforceConstraints = ds.EnforceConstraints
	  Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
	  Me.InitVars()
	End Sub

	Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
	  Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream()
	  Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
	  stream.Position = 0
	  Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
	End Function

	Friend Sub InitVars()
	  Me.tableCONTATTI = CType(Me.Tables("CONTATTI"), CONTATTIDataTable)
	  If (Not (Me.tableCONTATTI) Is Nothing) Then
		Me.tableCONTATTI.InitVars()
	  End If
	End Sub

	Private Sub InitClass()
	  Me.DataSetName = "dsContatti"
	  Me.Prefix = ""
	  Me.Namespace = "http://www.tempuri.org/dsContatti.xsd"
	  Me.Locale = New System.Globalization.CultureInfo("it-IT")
	  Me.CaseSensitive = False
	  Me.EnforceConstraints = True
	  Me.tableCONTATTI = New CONTATTIDataTable()
	  Me.Tables.Add(Me.tableCONTATTI)
	End Sub

	Private Function ShouldSerializeCONTATTI() As Boolean
	  Return False
	End Function

	Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
	  If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
		Me.InitVars()
	  End If
	End Sub

	Public Delegate Sub CONTATTIRowChangeEventHandler(ByVal sender As Object, ByVal e As CONTATTIRowChangeEvent)

	<System.Diagnostics.DebuggerStepThrough()> _
	Public Class CONTATTIDataTable
	  Inherits DataTable
	  Implements System.Collections.IEnumerable

	  Private columnIDRIFERIMENTO As DataColumn

	  Private columnTipoRiferimento As DataColumn

	  Private columnDatiRiferimento As DataColumn

	  Private columnCOD_CONTRIBUENTE As DataColumn

	  Private columnIDDATAANAGRAFICA As DataColumn

	  Friend Sub New()
		MyBase.New("CONTATTI")
		Me.InitClass()
	  End Sub

	  Friend Sub New(ByVal table As DataTable)
		MyBase.New(table.TableName)
		If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
		  Me.CaseSensitive = table.CaseSensitive
		End If
		If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
		  Me.Locale = table.Locale
		End If
		If (table.Namespace <> table.DataSet.Namespace) Then
		  Me.Namespace = table.Namespace
		End If
		Me.Prefix = table.Prefix
		Me.MinimumCapacity = table.MinimumCapacity
		Me.DisplayExpression = table.DisplayExpression
	  End Sub

	  <System.ComponentModel.Browsable(False)> _
	  Public ReadOnly Property Count() As Integer
		Get
		  Return Me.Rows.Count
		End Get
	  End Property

	  Friend ReadOnly Property IDRIFERIMENTOColumn() As DataColumn
		Get
		  Return Me.columnIDRIFERIMENTO
		End Get
	  End Property

	  Friend ReadOnly Property TipoRiferimentoColumn() As DataColumn
		Get
		  Return Me.columnTipoRiferimento
		End Get
	  End Property

	  Friend ReadOnly Property DatiRiferimentoColumn() As DataColumn
		Get
		  Return Me.columnDatiRiferimento
		End Get
	  End Property

	  Friend ReadOnly Property COD_CONTRIBUENTEColumn() As DataColumn
		Get
		  Return Me.columnCOD_CONTRIBUENTE
		End Get
	  End Property

	  Friend ReadOnly Property IDDATAANAGRAFICAColumn() As DataColumn
		Get
		  Return Me.columnIDDATAANAGRAFICA
		End Get
	  End Property

	  Default Public ReadOnly Property Item(ByVal index As Integer) As CONTATTIRow
		Get
		  Return CType(Me.Rows(index), CONTATTIRow)
		End Get
	  End Property

	  Public Event CONTATTIRowChanged As CONTATTIRowChangeEventHandler

	  Public Event CONTATTIRowChanging As CONTATTIRowChangeEventHandler

	  Public Event CONTATTIRowDeleted As CONTATTIRowChangeEventHandler

	  Public Event CONTATTIRowDeleting As CONTATTIRowChangeEventHandler

	  Public Overloads Sub AddCONTATTIRow(ByVal row As CONTATTIRow)
		Me.Rows.Add(row)
	  End Sub

	  Public Overloads Function AddCONTATTIRow(ByVal TipoRiferimento As Integer, ByVal DatiRiferimento As String, ByVal COD_CONTRIBUENTE As Integer, ByVal IDDATAANAGRAFICA As Integer) As CONTATTIRow
		Dim rowCONTATTIRow As CONTATTIRow = CType(Me.NewRow, CONTATTIRow)
		rowCONTATTIRow.ItemArray = New Object() {Nothing, TipoRiferimento, DatiRiferimento, COD_CONTRIBUENTE, IDDATAANAGRAFICA}
		Me.Rows.Add(rowCONTATTIRow)
		Return rowCONTATTIRow
	  End Function

	  Public Function FindByIDRIFERIMENTO(ByVal IDRIFERIMENTO As Integer) As CONTATTIRow
		Return CType(Me.Rows.Find(New Object() {IDRIFERIMENTO}), CONTATTIRow)
	  End Function

	  Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
		Return Me.Rows.GetEnumerator
	  End Function

	  Public Overrides Function Clone() As DataTable
		Dim cln As CONTATTIDataTable = CType(MyBase.Clone, CONTATTIDataTable)
		cln.InitVars()
		Return cln
	  End Function

	  Protected Overrides Function CreateInstance() As DataTable
		Return New CONTATTIDataTable()
	  End Function

	  Friend Sub InitVars()
		Me.columnIDRIFERIMENTO = Me.Columns("IDRIFERIMENTO")
		Me.columnTipoRiferimento = Me.Columns("TipoRiferimento")
		Me.columnDatiRiferimento = Me.Columns("DatiRiferimento")
		Me.columnCOD_CONTRIBUENTE = Me.Columns("COD_CONTRIBUENTE")
		Me.columnIDDATAANAGRAFICA = Me.Columns("IDDATAANAGRAFICA")
	  End Sub

	  Private Sub InitClass()
		Me.columnIDRIFERIMENTO = New DataColumn("IDRIFERIMENTO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
		Me.Columns.Add(Me.columnIDRIFERIMENTO)
		Me.columnTipoRiferimento = New DataColumn("TipoRiferimento", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
		Me.Columns.Add(Me.columnTipoRiferimento)
		Me.columnDatiRiferimento = New DataColumn("DatiRiferimento", GetType(System.String), Nothing, System.Data.MappingType.Element)
		Me.Columns.Add(Me.columnDatiRiferimento)
		Me.columnCOD_CONTRIBUENTE = New DataColumn("COD_CONTRIBUENTE", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
		Me.Columns.Add(Me.columnCOD_CONTRIBUENTE)
		Me.columnIDDATAANAGRAFICA = New DataColumn("IDDATAANAGRAFICA", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
		Me.Columns.Add(Me.columnIDDATAANAGRAFICA)
		Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDRIFERIMENTO}, True))
		Me.columnIDRIFERIMENTO.AutoIncrement = True
		Me.columnIDRIFERIMENTO.AllowDBNull = False
		Me.columnIDRIFERIMENTO.ReadOnly = True
		Me.columnIDRIFERIMENTO.Unique = True
	  End Sub

	  Public Function NewCONTATTIRow() As CONTATTIRow
		Return CType(Me.NewRow, CONTATTIRow)
	  End Function

	  Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
		Return New CONTATTIRow(builder)
	  End Function

	  Protected Overrides Function GetRowType() As System.Type
		Return GetType(CONTATTIRow)
	  End Function

	  Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
		MyBase.OnRowChanged(e)
		If (Not (Me.CONTATTIRowChangedEvent) Is Nothing) Then
		  RaiseEvent CONTATTIRowChanged(Me, New CONTATTIRowChangeEvent(CType(e.Row, CONTATTIRow), e.Action))
		End If
	  End Sub

	  Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
		MyBase.OnRowChanging(e)
		If (Not (Me.CONTATTIRowChangingEvent) Is Nothing) Then
		  RaiseEvent CONTATTIRowChanging(Me, New CONTATTIRowChangeEvent(CType(e.Row, CONTATTIRow), e.Action))
		End If
	  End Sub

	  Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
		MyBase.OnRowDeleted(e)
		If (Not (Me.CONTATTIRowDeletedEvent) Is Nothing) Then
		  RaiseEvent CONTATTIRowDeleted(Me, New CONTATTIRowChangeEvent(CType(e.Row, CONTATTIRow), e.Action))
		End If
	  End Sub

	  Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
		MyBase.OnRowDeleting(e)
		If (Not (Me.CONTATTIRowDeletingEvent) Is Nothing) Then
		  RaiseEvent CONTATTIRowDeleting(Me, New CONTATTIRowChangeEvent(CType(e.Row, CONTATTIRow), e.Action))
		End If
	  End Sub

	  Public Sub RemoveCONTATTIRow(ByVal row As CONTATTIRow)
		Me.Rows.Remove(row)
	  End Sub
	End Class

	<System.Diagnostics.DebuggerStepThrough()> _
	Public Class CONTATTIRow
	  Inherits DataRow

	  Private tableCONTATTI As CONTATTIDataTable

	  Friend Sub New(ByVal rb As DataRowBuilder)
		MyBase.New(rb)
		Me.tableCONTATTI = CType(Me.Table, CONTATTIDataTable)
	  End Sub

	  Public Property IDRIFERIMENTO() As Integer
		Get
		  Return CType(Me(Me.tableCONTATTI.IDRIFERIMENTOColumn), Integer)
		End Get
		Set(ByVal Value As Integer)
		  Me(Me.tableCONTATTI.IDRIFERIMENTOColumn) = Value
		End Set
	  End Property

	  Public Property TipoRiferimento() As Integer
		Get
		  Try
			Return CType(Me(Me.tableCONTATTI.TipoRiferimentoColumn), Integer)
		  Catch e As InvalidCastException
			Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
		  End Try
		End Get
		Set(ByVal Value As Integer)
		  Me(Me.tableCONTATTI.TipoRiferimentoColumn) = Value
		End Set
	  End Property

	  Public Property DatiRiferimento() As String
		Get
		  Try
			Return CType(Me(Me.tableCONTATTI.DatiRiferimentoColumn), String)
		  Catch e As InvalidCastException
			Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
		  End Try
		End Get
		Set(ByVal Value As String)
		  Me(Me.tableCONTATTI.DatiRiferimentoColumn) = Value
		End Set
	  End Property

	  Public Property COD_CONTRIBUENTE() As Integer
		Get
		  Try
			Return CType(Me(Me.tableCONTATTI.COD_CONTRIBUENTEColumn), Integer)
		  Catch e As InvalidCastException
			Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
		  End Try
		End Get
		Set(ByVal Value As Integer)
		  Me(Me.tableCONTATTI.COD_CONTRIBUENTEColumn) = Value
		End Set
	  End Property

	  Public Property IDDATAANAGRAFICA() As Integer
		Get
		  Try
			Return CType(Me(Me.tableCONTATTI.IDDATAANAGRAFICAColumn), Integer)
		  Catch e As InvalidCastException
			Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
		  End Try
		End Get
		Set(ByVal Value As Integer)
		  Me(Me.tableCONTATTI.IDDATAANAGRAFICAColumn) = Value
		End Set
	  End Property

	  Public Function IsTipoRiferimentoNull() As Boolean
		Return Me.IsNull(Me.tableCONTATTI.TipoRiferimentoColumn)
	  End Function

	  Public Sub SetTipoRiferimentoNull()
		Me(Me.tableCONTATTI.TipoRiferimentoColumn) = System.Convert.DBNull
	  End Sub

	  Public Function IsDatiRiferimentoNull() As Boolean
		Return Me.IsNull(Me.tableCONTATTI.DatiRiferimentoColumn)
	  End Function

	  Public Sub SetDatiRiferimentoNull()
		Me(Me.tableCONTATTI.DatiRiferimentoColumn) = System.Convert.DBNull
	  End Sub

	  Public Function IsCOD_CONTRIBUENTENull() As Boolean
		Return Me.IsNull(Me.tableCONTATTI.COD_CONTRIBUENTEColumn)
	  End Function

	  Public Sub SetCOD_CONTRIBUENTENull()
		Me(Me.tableCONTATTI.COD_CONTRIBUENTEColumn) = System.Convert.DBNull
	  End Sub

	  Public Function IsIDDATAANAGRAFICANull() As Boolean
		Return Me.IsNull(Me.tableCONTATTI.IDDATAANAGRAFICAColumn)
	  End Function

	  Public Sub SetIDDATAANAGRAFICANull()
		Me(Me.tableCONTATTI.IDDATAANAGRAFICAColumn) = System.Convert.DBNull
	  End Sub
	End Class

	<System.Diagnostics.DebuggerStepThrough()> _
	Public Class CONTATTIRowChangeEvent
	  Inherits EventArgs

	  Private eventRow As CONTATTIRow

	  Private eventAction As DataRowAction

	  Public Sub New(ByVal row As CONTATTIRow, ByVal action As DataRowAction)
		MyBase.New()
		Me.eventRow = row
		Me.eventAction = action
	  End Sub

	  Public ReadOnly Property Row() As CONTATTIRow
		Get
		  Return Me.eventRow
		End Get
	  End Property

	  Public ReadOnly Property Action() As DataRowAction
		Get
		  Return Me.eventAction
		End Get
	  End Property
	End Class
  End Class
End Namespace